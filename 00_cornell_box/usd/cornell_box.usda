#usda 1.0
(
    doc = "Blender v2.90.1"
    metersPerUnit = 0.001
    upAxis = "Z"
)

def Xform "cbox_green"
{
    matrix4d xformOp:transform = ( (-1, -1.5099580252808664e-7, 0, 0), (1.1399865765455465e-14, -7.549790126404332e-8, 1, 0), (-1.5099580252808664e-7, 1, 7.549790126404332e-8, 0), (0, 0, 0, 1) )
    uniform token[] xformOpOrder = ["xformOp:transform"]

    def Mesh "cbox_green"
    {
        uniform bool doubleSided = 1
        int[] faceVertexCounts = [4]
        int[] faceVertexIndices = [1, 2, 3, 0]
        rel material:binding = </_materials/cbox_green>
        normal3f[] normals = [(0.99999994, 0, 0), (0.99999994, 0, 0), (0.99999994, 0, 0), (0.99999994, 0, 0)] (
            interpolation = "faceVarying"
        )
        point3f[] points = [(0, 0, 559.2), (0, 0, 0), (0, 548.8, 0), (0, 548.8, 559.2)]
        uniform token subdivisionScheme = "none"
    }
}

def "_materials"
{
    def Material "cbox_green"
    {
        token outputs:surface.connect = </_materials/cbox_green/previewShader.outputs:surface>

        def Shader "previewShader"
        {
            uniform token info:id = "UsdPreviewSurface"
            color3f inputs:diffuseColor = (0, 0.5, 0)
            float inputs:metallic = 0
            float inputs:roughness = 0.5
            token outputs:surface
        }
    }

    def Material "cbox"
    {
        token outputs:surface.connect = </_materials/cbox/previewShader.outputs:surface>

        def Shader "previewShader"
        {
            uniform token info:id = "UsdPreviewSurface"
            color3f inputs:diffuseColor = (0.4, 0.4, 0.4)
            float inputs:metallic = 0
            float inputs:roughness = 0.5
            token outputs:surface
        }
    }

    def Material "Light"
    {
        token outputs:surface.connect = </_materials/Light/previewShader.outputs:surface>

        def Shader "previewShader"
        {
            uniform token info:id = "UsdPreviewSurface"
            color3f inputs:diffuseColor = (1, 1, 1)
            float inputs:metallic = 0
            float inputs:roughness = 0.5
            token outputs:surface
        }
    }

    def Material "large_box"
    {
        token outputs:surface.connect = </_materials/large_box/previewShader.outputs:surface>

        def Shader "previewShader"
        {
            uniform token info:id = "UsdPreviewSurface"
            color3f inputs:diffuseColor = (0.5, 0.5, 0.5)
            float inputs:metallic = 0
            float inputs:roughness = 0.5
            token outputs:surface
        }
    }

    def Material "small_box"
    {
        token outputs:surface.connect = </_materials/small_box/previewShader.outputs:surface>

        def Shader "previewShader"
        {
            uniform token info:id = "UsdPreviewSurface"
            color3f inputs:diffuseColor = (0.5, 0.5, 0.5)
            float inputs:metallic = 0
            float inputs:roughness = 0.5
            token outputs:surface
        }
    }

    def Material "cbox_red"
    {
        token outputs:surface.connect = </_materials/cbox_red/previewShader.outputs:surface>

        def Shader "previewShader"
        {
            uniform token info:id = "UsdPreviewSurface"
            color3f inputs:diffuseColor = (0.5, 0, 0)
            float inputs:metallic = 0
            float inputs:roughness = 0.5
            token outputs:surface
        }
    }
}

def Xform "cbox"
{
    matrix4d xformOp:transform = ( (-1, -1.5099580252808664e-7, 0, 0), (1.1399865765455465e-14, -7.549790126404332e-8, 1, 0), (-1.5099580252808664e-7, 1, 7.549790126404332e-8, 0), (0, 0, 0, 1) )
    uniform token[] xformOpOrder = ["xformOp:transform"]

    def Mesh "cbox"
    {
        uniform bool doubleSided = 1
        int[] faceVertexCounts = [4, 4, 4]
        int[] faceVertexIndices = [2, 0, 1, 3, 6, 5, 4, 7, 2, 5, 6, 0]
        rel material:binding = </_materials/cbox>
        normal3f[] normals = [(0, 1, -0), (0, 1, -0), (0, 1, -0), (0, 1, -0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (-0, 0, -1), (-0, 0, -1), (-0, 0, -1), (-0, 0, -1)] (
            interpolation = "faceVarying"
        )
        point3f[] points = [(549.6, 0, 559.2), (552.8, 0, 0), (0, 0, 559.2), (0, 0, 0), (0, 548.8, 0), (0, 548.8, 559.2), (556, 548.8, 559.2), (556, 548.8, 0)]
        uniform token subdivisionScheme = "none"
    }
}

def Xform "Light"
{
    matrix4d xformOp:transform = ( (-1, 8.742277657347586e-8, 0, 0), (3.821371353845884e-15, 4.371138828673793e-8, 1, 0), (8.742277657347586e-8, 1, -4.371138828673793e-8, 0), (-278, 279.5, 547.7999877929688, 1) )
    uniform token[] xformOpOrder = ["xformOp:transform"]

    def Mesh "Light"
    {
        uniform bool doubleSided = 1
        int[] faceVertexCounts = [4]
        int[] faceVertexIndices = [0, 2, 3, 1]
        rel material:binding = </_materials/Light>
        normal3f[] normals = [(0, -1, -0), (0, -1, -0), (0, -1, -0), (0, -1, -0)] (
            interpolation = "faceVarying"
        )
        point3f[] points = [(-65.000015, 0, -52.499985), (-65, 0, 52.5), (65, 0, -52.5), (65, 0, 52.5)]
        uniform token subdivisionScheme = "none"
    }
}

def Xform "Camera"
{
    matrix4d xformOp:transform = ( (1, 3.019916050561733e-7, 0, 0), (-2.279973153091093e-14, 7.549790126404332e-8, 1, 0), (3.019916050561733e-7, -1, 7.549790126404332e-8, 0), (-277.99993896484375, -800, 273, 1) )
    uniform token[] xformOpOrder = ["xformOp:transform"]

    def Camera "Camera"
    {
        float2 clippingRange = (0.1, 1500)
        float focalLength = 45
        float horizontalAperture = 32
        float horizontalApertureOffset = 0
        token projection = "perspective"
        float verticalAperture = 32
        float verticalApertureOffset = 0
    }
}

def Xform "large_box"
{
    matrix4d xformOp:transform = ( (-48.88637161254883, 157.59164428710938, -0.000028849515729234554, 0), (-0.000003318031076560146, 0.00005938217509537935, 330, 0), (157.59164428710938, 48.88637161254883, -0.0000072123789323086385, 0), (-368.0000305175781, 351, 165.00003051757812, 1) )
    uniform token[] xformOpOrder = ["xformOp:transform"]

    def Mesh "large_box"
    {
        uniform bool doubleSided = 1
        int[] faceVertexCounts = [4, 4, 4, 4, 4, 4]
        int[] faceVertexIndices = [4, 5, 1, 0, 5, 6, 2, 1, 6, 7, 3, 2, 7, 4, 0, 3, 0, 1, 2, 3, 7, 6, 5, 4]
        rel material:binding = </_materials/large_box>
        normal3f[] normals = [(-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (0, 1, -0), (0, 1, -0), (0, 1, -0), (0, 1, -0), (1, 0, -0), (1, 0, -0), (1, 0, -0), (1, 0, -0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (-0, 0, -1), (-0, 0, -1), (-0, 0, -1), (-0, 0, -1), (-0, 0, 1), (-0, 0, 1), (-0, 0, 1), (-0, 0, 1)] (
            interpolation = "faceVarying"
        )
        point3f[] points = [(-0.5, -0.5, -0.5), (-0.5, 0.5, -0.5), (0.5, 0.5, -0.5), (0.5, -0.5, -0.5), (-0.5, -0.5, 0.5), (-0.5, 0.5, 0.5), (0.5, 0.5, 0.5), (0.5, -0.5, 0.5)]
        uniform token subdivisionScheme = "none"
    }
}

def Xform "small_box"
{
    matrix4d xformOp:transform = ( (-79.0550308227539, 23.591384887695312, 0.000003093634632023168, 0), (0.0000011833527651106124, -0.00000685313261783449, 82.50000762939453, 0), (23.591384887695312, 79.0550308227539, 0.00000622857760390616, 0), (-185.00001525878906, 169, 82.50001525878906, 1) )
    uniform token[] xformOpOrder = ["xformOp:transform"]

    def Mesh "small_box"
    {
        uniform bool doubleSided = 1
        int[] faceVertexCounts = [4, 4, 4, 4, 4, 4]
        int[] faceVertexIndices = [4, 5, 1, 0, 5, 6, 2, 1, 6, 7, 3, 2, 7, 4, 0, 3, 0, 1, 2, 3, 7, 6, 5, 4]
        rel material:binding = </_materials/small_box>
        normal3f[] normals = [(-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (0, 1, -0), (0, 1, -0), (0, 1, -0), (0, 1, -0), (1, 0, -0), (1, 0, -0), (1, 0, -0), (1, 0, -0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (-0, 0, -1), (-0, 0, -1), (-0, 0, -1), (-0, 0, -1), (-0, 0, 1), (-0, 0, 1), (-0, 0, 1), (-0, 0, 1)] (
            interpolation = "faceVarying"
        )
        point3f[] points = [(-1, -1, -1), (-1, 1, -1), (1, 1, -1), (1, -1, -1), (-1, -1, 1), (-1, 1, 1), (1, 1, 1), (1, -1, 1)]
        uniform token subdivisionScheme = "none"
    }
}

def Xform "cbox_red"
{
    matrix4d xformOp:transform = ( (-1, -1.5099580252808664e-7, 0, 0), (1.1399865765455465e-14, -7.549790126404332e-8, 1, 0), (-1.5099580252808664e-7, 1, 7.549790126404332e-8, 0), (0, 0, 0, 1) )
    uniform token[] xformOpOrder = ["xformOp:transform"]

    def Mesh "cbox_red"
    {
        uniform bool doubleSided = 1
        int[] faceVertexCounts = [4]
        int[] faceVertexIndices = [0, 2, 3, 1]
        rel material:binding = </_materials/cbox_red>
        normal3f[] normals = [(-0.99995774, 0.00874602, -0.0028611203), (-0.99995774, 0.00874602, -0.0028611203), (-0.99995774, 0.00874602, -0.0028611203), (-0.99995774, 0.00874602, -0.0028611203)] (
            interpolation = "faceVarying"
        )
        point3f[] points = [(549.6, 0, 559.2), (552.8, 0, 0), (556, 548.8, 559.2), (556, 548.8, 0)]
        uniform token subdivisionScheme = "none"
    }
}

